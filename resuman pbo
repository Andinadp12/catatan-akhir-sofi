##class dan object
class adalah kerangka yang terdiri dari method dan atribut.class itu contohnya mobil, yang mana mobil adalah kosongan/masih umum
Object merupakan properti yang berbeda atau bermacam-macam yang sudah berisi
object adalah contohnya sedan,avansa,jeep yang mana mereka sudah berisi atau memiliki properti
Objek terdiri dari data internal dan sekumpulan operasi (disebut metode) yang bersangkutan
class memiliki atribut/property dan method,yang di maksud atribut adalah data yang terdapat dalam object class,bisa berupa sifat atau ciri yang membedakan,contoh:atribut mobil adalah warna ,jenis,atau merk misalnya
method adalah tindakan yang akan  dilakukan dalam class,contohnya:menampilkan,menghidupkan_mobil
Metode __init__() adalah metode konstruktor, yaitu metode khusus yang dalam Python untuk menginisialisasi pembuatan objek dari kelas tersebut. 
Setiap method harus memiliki parameter self ,artinya methode tersebut dimiliki oleh class itu sendiri
method di awali dengan fungsi,contohnya def ...(self): 
Instansiasi Objek (membuat objek dari sebuah kelas)
Argumen sesuai dengan fungsi __init__() pada saat kita mendefinisikannya 
cara memanggil class dan method yaitu:
obj=namaclass()
obj.namamethod()
##inheritance atau pewarisan atau turunan
yang diwariskan boleh properti saja, method saja, properti dan method atau properti dan properti 
funfsi inheritance untuk menambahkan sifat baru tanpa menghilangkan sifat dari class induk
kelas anak mewarisi sifat class induk
fungsi super()hampirsama dengan self,bedanya kalau super()menunjuk ke kelas induk,sedangkan self menunjuk pada class itu sendiri
manfaat fungsi super() yaitu agar tidak mengulang atau duplikasi kode
tipe inheritance:
-Single Inheritance adalah subclass hanya dapat mempunyai satu parent class
-Multiple Inheritance adalah memperbolehkan satu class memiliki lebih dari satu parent class atau  mendefinisikan kelas baru yang diturunkan dari dua kelas induk atau lebih 
contoh:
class Coral: 
	def community(self): 
		print("Coral lives in a community.") 

class Anemone: 
	def protect_clownfish(self): 
		print("The anemone is protecting the clownfish.") 

class CoralReef(Coral, Anemone): ==>multiple inheritance
	pass 
output:
Coral lives in a community.
The anemone is protecting the clownfish.



-Multi Level Inheritance yaitu memperbolehkan suatu subclass mempunyai subclass lainnya.
overriding yaitu mengabaikan kelas induk didalam kelas anak
contoh:
class induk:
    def tampilkan(self):
        print ("saya adalah induknya")
class anak(induk):
    def tampilkan(self):
        print ("saya adalah anaknya")
obj=anak()
obj.tampilkan()
outputnya:
saya adalah anaknya ==>yang di print adalah method yang ada di kelas anak

##polymorpism adalah poly= banyak,morpism= bentuk
Polymorphisme adalah functionnya sama tapi bentuknya berbeda
contoh suara:anjing,goog;bebek,wek;jangkrik,krik
polimorphism ada 2:polymorfism with funtion dan polymorphism with class method
class Shark(): 
	def swim(self): 
		print("The shark is swimming.") 
	def swim_backwards(self): 
		print("The shark cannot swim backwards, but can sink backwards.") 
	def skeleton(self): 
		print("The shark's skeleton is made of cartilage.") 

class Clownfish(): 
	def swim(self): 
		print("The clownfish is swimming.") 
	def swim_backwards(self): 
		print("The clownfish can swim backwards.") 
	def skeleton(self): 
		print("The clownfish's skeleton is made of bone.")
        
def in_the_pacific(fish): 
	fish.swim() 
#polymorphime with function
sammy = Shark() 
casey = Clownfish() 

in_the_pacific(sammy) 
in_the_pacific(casey
#polymorphime with class method
sammy = Shark()
casey = Clownfish()

for fish in (sammy, casey):
    fish.swim()
    fish.swim_backwards()
    fish.skeleton()

Abstrac class yaitu dipakai dikelas induk/Superclass  dimana ada method yang tidak didefinisikan dengan jelas dikelas induk dan method yang terdefinisikan dengan jelas ada di Subclass/kelas anak
contoh:
class binatang():
    def __init__(self,nama):
        self.nama=nama
    def cara_berjalan(self):
        raise NotImplementedError("subclass most implement abstract method")==> merupakan abstract class
    def bersuara(self):
        raise NotImplementedError("subclass most implement abstract method")==> merupakan abstract class
        
class kucing(binatang):
    def cara_berjalan(self):
        return "merangkak"
    def bersuara(self):
        return "meoong"
class anjing(binatang):
  
    def cara_berjalan(self):
        return "berderap"
    def bersuara(self):
        return "gug gug"

binatang1=[kucing("catty"),anjing("doggy")]

for binatang2 in binatang1:
    print (binatang2.nama+":" +"cara berjalannya",binatang2.cara_berjalan()+"," +"bersuara",binatang2.bersuara())
#hasil output
catty:cara berjalan merangkak,bersuara meoongOVERLOADING
Sebenarnya dalam python tidak disediakan methode overloading dan overriding 
Method Overloading adalah methode yang membolehkan sebuah class mempunyai dua atau lebih method dengan nama yang sama, yang membedakan adalah parameternya.
Berikut ini contoh Class yang melakukan Overloading.
class human:
    def sayHello(self,name=None):
        if name is not None:
            print ("hello"+name)
        else:
            print ("hello")
#creat instance
obj=human()
#call the methode
obj.sayHello()
#call a methode will a parameter
obj.sayHello("Guido")

Outputnya:
hello
helloGuido

ENCAPSULATION
Encapsulation adalah methode untuk mengatur property class dengan cara menyembunyikannya. Component class yang dimaksud adalah property dan methode. 
Dengan encapsulation kita dapat membuat pembatasan akses kepada property dan method, sehingga property dan methode tertentu saja yang bisa di akses dari luar class 
Dua underscore sebelum variable, menandakan variabel privat, Pengaksesanya sulit dan membutuhkan Method khusus untuk memanggilnya
class car:
    __maxspeed=0
    __name=""
    def __init__(self):
        self.__maxspeed=200
        self.__nama="super car"
    def drive(self):
        print("driving.maxspeed"+str(self.__maxspeed))
    def setmaxspeed(self,speed)
        self.__maxspeed=speed
        
redcar=car()
redcar.drive()
redcar.setmaxspeed(10)
redcar.__maxspeed=10#will not change variable because is privat
redcar.drive()

Outputnya:
driving.maxspeed200
driving.maxspeed10

Jika satu Underscore sebelum variabelnya, menandakan Sebuah variabel Privat seharusnya tidak diakses secara langsung.
contoh:
class A(object):
    #public method
    def mypublicmethod(self):
        return ("this is a public mthod")
    #private method
    def _myprivatmethod(self):====>ini variabel privat
        return ("this is a privt method")
    #
    def __myanotherprivatmethod(self):
        return ("this is another method")
#nama object
obj=A()
#we can access the public method which is cool!!
print (obj.mypublicmethod())#output:this is a public method
#note that we can also access the privat method from outside
print(obj._myprivatmethod())===>ini cara memanggilnya
##howwever,you cn still call the doble underscore methode
##by appending the _class
print (obj._A__myanotherprivatmethod())

Outputnya:
this is a public method
this is a privt method
this is another method

        
Encapsulation dalam python ada Getter dan setter
Dengan Metode Ini, variable privat bisa diakses secara tidak langsung kepada variabel privat. 
Encapsulation dalam python ada Getter dan setter
Getter Ialah Metode untuk menampilkan Variabel yang Terproteksi dua Underscore didepannya
Sedangkan Setter adalah Metode untuk mengubah atau mengganti isi dari variabelnya.
class robot(object):
    def __init__(self):
        self.__version=22
    def getversion(self): #===> ini menggunakan metode set
        print (self.__version)
    def setversion(self,version):#ini menggunakan methode set
        self.__version=version
        
obj=robot()
obj.getversion()
obj.setversion(22)
obj.getversion()
print(obj.__version)
print(obj._robot__version)

Outputnya:
22
22
doggy:cara berjalan berderap,bersuara gug gug

OVERLOADING
Sebenarnya dalam python tidak disediakan methode overloading dan overriding 
Method Overloading adalah methode yang membolehkan sebuah class mempunyai dua atau lebih method dengan nama yang sama, yang membedakan adalah parameternya.
Berikut ini contoh Class yang melakukan Overloading.
class human:
    def sayHello(self,name=None):
        if name is not None:
            print ("hello"+name)
        else:
            print ("hello")
#creat instance
obj=human()
#call the methode
obj.sayHello()
#call a methode will a parameter
obj.sayHello("Guido")

Outputnya:
hello
helloGuido

ENCAPSULATION
Encapsulation adalah methode untuk mengatur property class dengan cara menyembunyikannya. Component class yang dimaksud adalah property dan methode. 
Dengan encapsulation kita dapat membuat pembatasan akses kepada property dan method, sehingga property dan methode tertentu saja yang bisa di akses dari luar class 
Dua underscore sebelum variable, menandakan variabel privat, Pengaksesanya sulit dan membutuhkan Method khusus untuk memanggilnya
class car:
    __maxspeed=0
    __name=""
    def __init__(self):
        self.__maxspeed=200
        self.__nama="super car"
    def drive(self):
        print("driving.maxspeed"+str(self.__maxspeed))
    def setmaxspeed(self,speed)
        self.__maxspeed=speed
        
redcar=car()
redcar.drive()
redcar.setmaxspeed(10)
redcar.__maxspeed=10#will not change variable because is privat
redcar.drive()

Outputnya:
driving.maxspeed200
driving.maxspeed10

Jika satu Underscore sebelum variabelnya, menandakan Sebuah variabel Privat seharusnya tidak diakses secara langsung.
contoh:
class A(object):
    #public method
    def mypublicmethod(self):
        return ("this is a public mthod")
    #private method
    def _myprivatmethod(self):====>ini variabel privat
        return ("this is a privt method")
    #
    def __myanotherprivatmethod(self):
        return ("this is another method")
#nama object
obj=A()
#we can access the public method which is cool!!
print (obj.mypublicmethod())#output:this is a public method
#note that we can also access the privat method from outside
print(obj._myprivatmethod())#===>ini cara memanggilnya
##howwever,you cn still call the doble underscore methode
##by appending the _class
print (obj._A__myanotherprivatmethod())

Outputnya:
this is a public method
this is a privt method
this is another method

        
Encapsulation dalam python ada Getter dan setter
Dengan Metode Ini, variable privat bisa diakses secara tidak langsung kepada variabel privat. 
Encapsulation dalam python ada Getter dan setter
Getter Ialah Metode untuk menampilkan Variabel yang Terproteksi dua Underscore didepannya
Sedangkan Setter adalah Metode untuk mengubah atau mengganti isi dari variabelnya.
class robot(object):
    def __init__(self):
        self.__version=22
    def getversion(self): #===> ini menggunakan metode set
        print (self.__version)
    def setversion(self,version):#ini menggunakan methode set
        self.__version=version
        
obj=robot()
obj.getversion()
obj.setversion(22)
obj.getversion()
print(obj.__version)
print(obj._robot__version)

Outputnya:
22
22

    
